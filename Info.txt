1. Git: https://try.github.io/

2. Git GUI: https://www.gitkraken.com/

3. Docker Podcast: https://www.bretfisher.com/podcast/

4. Useful resource: https://www.bretfisher.com/

5. Compose Overview: https://docs.docker.com/compose/

6. Docker toolbox install: https://github.com/docker/toolbox/releases

7. Docker Docs for Install: https://docs.docker.com/install/#supported-platforms

8. Compose Overview: https://docs.docker.com/compose/

9. Compose not ideal for Production : https://github.com/BretFisher/ama/issues/8

10. Compose file format: https://docs.docker.com/compose/compose-file/

11. Compose file versions and upgrading: https://docs.docker.com/compose/compose-file/compose-versioning/

12. Docker Compose v2 Vs v3: https://github.com/docker/docker.github.io/pull/7593

13. docker-compose CLI : https://docs.docker.com/compose/reference/overview/

14. Alpine Linux Package: https://wiki.alpinelinux.org/wiki/Alpine_Linux_package_management

15. Docker file best practice : https://docs.docker.com/develop/develop-images/dockerfile_best-practices/

16. NodeJs Release Schedule: https://github.com/nodejs/Release#release-schedule

17. onbuild deprecation: https://github.com/docker-library/official-images/issues/2076

18. official Image on docker hub: https://hub.docker.com/_/node

19. CVE Scanning and Base images: https://kubedex.com/follow-up-container-scanning-comparison/

20. Image Scanning: https://www.youtube.com/watch?v=e2pAkcqYCG8

21. Centos on docker-hub: https://hub.docker.com/_/centos

22. Node on docker-hub: https://hub.docker.com/_/node

23. Dockerfile USER docs: https://docs.docker.com/engine/reference/builder/#user

24. Dockerfile COPY docs: https://docs.docker.com/engine/reference/builder/#copy

25. Notes: 
Change user from root to node: USER node
Set permission on app dir : RUN mkdir app && chown -R node:node .
Run a command as root user in container: docker-compose exec -u root
RUN, ENTRYPOINT and CMD can be used as node user only.
Use the optional flag --chown=<user>:<group> with either the ADD or COPY commands:
    For example: COPY --chown=<user>:<group> <hostPath> <containerPath>
    COPY --chown=user:user . /home/user/Projects/transpyle
    In Legacy way:
    COPY . /home/user/Projects/transpyle
    RUN sudo chown -R user:user /home/user/Projects/transpyle

26. Difference between chmod and chown: https://www.unixtutorial.org/difference-between-chmod-and-chown

27. Inject --init into docker : https://docs.docker.com/engine/reference/run/#specify-an-init-process

28. Tini (A tiny but valid `init` for containers): https://github.com/krallin/tini

29. Hapi.js API Framework: https://hapi.dev/

30. Docker multi-stage build: https://docs.docker.com/develop/develop-images/multistage-build/

31. Advanced multi-stage build patterns : https://medium.com/@tonistiigi/advanced-multi-stage-build-patterns-6f741b852fae

32. Supercharged Docker Build with BuildKit: https://www.youtube.com/watch?v=kkpQ_UZn2uo

33. Build Enhancements for Docker: https://docs.docker.com/develop/develop-images/build_enhancements/

34. BuildKit support: https://github.com/moby/buildkit/issues/685

35. BuildKit Links:
    https://github.com/moby/buildkit
    https://medium.com/@tonistiigi/advanced-multi-stage-build-patterns-6f741b852fae
    Build secrets and SSH forwarding in Docker 18.09: https://medium.com/@tonistiigi/build-secrets-and-ssh-forwarding-in-docker-18-09-ae8161d066
    Using SSH to access private data in builds: https://docs.docker.com/develop/develop-images/build_enhancements/#using-ssh-to-access-private-data-in-builds
    Dockerfile frontend experimental syntaxes: https://github.com/moby/buildkit/blob/master/frontend/dockerfile/docs/experimental.md
    https://www.youtube.com/watch?v=kkpQ_UZn2uo
    Build Enhancements for Docker: https://docs.docker.com/develop/develop-images/build_enhancements/
    Docker compose support : https://github.com/moby/buildkit/issues/685

36. Using SSH to access private data in build: https://docs.docker.com/develop/develop-images/build_enhancements/#using-ssh-to-access-private-data-in-builds

37. BuildKit 'frontend' including cache: https://github.com/moby/buildkit/blob/master/frontend/dockerfile/docs/experimental.md

38. The Twelve Factors: https://12factor.net/. Twelve factor principle is:
    A) use Environment variable for config.
    B) Log to Stdout/Stderr
    C) Pin all versions, even npm
    D) Graceful exit SIGTERM/INIT 
    E)Create a .dockerignore (like .gitignore)

39. Twelve factor Config: https://12factor.net/config

40. Advanced Node.js Project Structure Tutorial: https://blog.risingstack.com/node-js-project-structure-tutorial-node-js-at-scale/

41. Using environment variables in nginx configuration: https://docs.docker.com/samples/library/nginx/#using-environment-variables-in-nginx-configuration

42. Templated Nginx configuration with Bash and Docker: https://thepracticalsysadmin.com/templated-nginx-configuration-with-bash-and-docker/

43. Dynamic default.conf of nginx in docker: https://stackoverflow.com/questions/44804974/dynamic-default-conf-of-nginx-in-docker

44. Twelve factor Logs: https://12factor.net/logs

45. Winston logging with the console transport: https://github.com/winstonjs/winston/blob/master/docs/transports.md#console-transport

46. Create useful .gitignore files for your project: https://www.gitignore.io/

47. .dockerignore Examples: https://blog.codeship.com/leveraging-the-dockerignore-file-to-create-smaller-images/

48. To find the last container that ran:
docker ps -l 

49. Compose file V2: https://docs.docker.com/compose/compose-file/compose-versioning/#version-21

50. User-guided caching in Docker for Mac: https://www.docker.com/blog/user-guided-caching-in-docker-for-mac/

51. Docker on mac filesystem sharing: https://docs.docker.com/docker-for-mac/osxfs/

52. Performance tuning for volume mount: https://docs.docker.com/docker-for-mac/osxfs-caching/

53. Background sync tool: https://github.com/cweagans/docker-bg-sync

54. Docker for windows alternate setup: https://www.reddit.com/r/docker/comments/8hp6v7/setting_up_docker_for_windows_and_wsl_to_work/

55. Run command in container:
    docker-compose run : start a new container and run command shell
    docker-compose exec : run additional command/shell in currently running container.

56. nodemon coonfig files: https://github.com/remy/nodemon#config-files

57. compose-file-v2_depends_on: https://docs.docker.com/compose/compose-file/compose-file-v2/#depends_on

58. Compose file V2 Healthcheck: https://docs.docker.com/compose/compose-file/compose-file-v2/#healthcheck

59. Example Db healthcheck: https://github.com/docker-library/healthcheck

60. Certificates for localhost: https://letsencrypt.org/docs/certificates-for-localhost/

61. Automated nginx proxy for Docker containers using docker-gen: https://github.com/jwilder/nginx-proxy

62. USE DNSMASQ INSTEAD OF /ETC/HOSTS: https://www.stevenrombauts.be/2018/01/use-dnsmasq-instead-of-etc-hosts/

63. Use nginx-proxy and dnsmasq for user-friendly urls during local development: https://medium.com/@sumankpaul/use-nginx-proxy-and-dnsmasq-for-user-friendly-urls-during-local-development-a2ffebd8b05d

64. traefik proxy: https://traefik.io/

65. Docker CORS: https://github.com/docker-solr/docker-solr/issues/182
                 https://github.com/jwilder/nginx-proxy/issues/804

66. wildcard DNS for everyone: http://xip.io/

67. Node.js debugging in VS Code: https://code.visualstudio.com/docs/nodejs/nodejs-debugging

68. Debugging Typescript in docker: https://github.com/Microsoft/vscode-recipes/tree/master/Docker-TypeScript

69. ts-node readme: https://github.com/TypeStrong/ts-node

70. Dockerfile LABEL info : https://docs.docker.com/engine/reference/builder/#label

71. Docker object labels: https://docs.docker.com/config/labels-custom-metadata/

72. OCI standard LABEL format: https://github.com/opencontainers/image-spec/blob/master/annotations.md

73: Dockerfile ARG info: https://docs.docker.com/engine/reference/builder/#arg

74: Docker-hub option for for Autobuild and Autotest:https://docs.docker.com/docker-hub/builds/advanced/

75: Node Hero - Node.js Unit Testing: https://blog.risingstack.com/node-hero-node-js-unit-testing-tutorial/

76. 10 npm security best pracctice: https://snyk.io/blog/ten-npm-security-best-practices/

77. container scanning: https://kubedex.com/container-scanning/

78. Follow Up: Container Scanning Comparison: https://kubedex.com/follow-up-container-scanning-comparison/

79. Docker image scanning: https://sysdig.com/blog/docker-image-scanning/

80. Docker security tools compared: https://sysdig.com/blog/20-docker-security-tools/

81. How to deal with docker-compose: https://stackoverflow.com/questions/29568352/using-docker-compose-with-ci-how-to-deal-with-exit-codes-and-daemonized-linked

82: hadolint, a Dockerfile linter :https://github.com/hadolint/hadolint

83. An opinionated Dockerfile linter.: https://github.com/replicatedhq/dockerfilelint

84. Automated repository tests: https://docs.docker.com/docker-hub/builds/automated-testing/

85. Docker: The latest Confusion: https://blog.container-solutions.com/docker-latest-confusion

86. Docker Healthcheck: https://docs.docker.com/engine/reference/builder/#healthcheck

87. Effective Docker Healthchecks For Node.js: https://medium.com/@patrickleet/effective-docker-healthchecks-for-node-js-b11577c3e595

88. Aqua MicroScanner: https://github.com/aquasecurity/microscanner

89. tini, the tini init : https://github.com/krallin/tini